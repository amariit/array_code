Given a sorted array and an element to search, find the index of the element using the binary search algorithm. If the element is 
not found in the array return -1. 

Write a function solution that accepts a sorted array of numbers A, size of the array N and the element to search E.
The function should return the index of the element.

Input
    10 
    2 4 5 6 8 12 15 18 30 54
    8  

    where, 

    The first line represents the size of an array. 
    The second line represents array elements. 
    The third line represents the element to search. 

Output
    4 
Note : The given array contains the element 8 at index 4 (index starts from 0).

______________________________*******************************************_______________________________________


Code : 

#include<stdio.h>
#include<stdlib.h>

int solution(int A[],int L, int N, int E)
{
    if(N>=L){
        int mid=L+(N-L)/2;
        if(A[mid]==E){
            return mid;
        }
        else if(A[mid] > E){
            return solution(A,L,mid-1,E);
        }
        else{
            return solution(A,mid+1,N,E);
        }
        
    }
            return -1;    
}

int main()
{
    int *A,N,E,i;    
    scanf("%d",&N);
    A = (int *) malloc(sizeof(int)*N);
    for(i=0;i<N;i++)
        scanf("%d",&A[i]);
    scanf("%d",&E);
    if(N==1){
        if(A[0]==E){
            printf("0");
        }
        else{
            printf("-1");
        }
    }
    else{
        printf("%d",solution(A,0,N-1,E));
    }
}
